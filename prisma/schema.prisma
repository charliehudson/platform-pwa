// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  hashedPw      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts           Account[]
  sessions           Session[]
  profile            Profile?
  requests           InsuranceRequest[]
  verificationTokens VerificationToken[]
}

model Profile {
  id          String  @id @default(cuid())
  userId      String  @unique
  phone       String?
  address     Json?
  prefs       Json?
  riskProfile Json?
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?

  @@unique([identifier, token])
}

model InsuranceRequest {
  id        String        @id @default(cuid())
  userId    String
  type      RequestType
  status    RequestStatus @default(DRAFT)
  form      Json
  scores    Json?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents    Document[]
  chatSessions ChatSession[]
}

model Document {
  id        String   @id @default(cuid())
  requestId String
  s3Key     String
  mime      String
  extracted Boolean  @default(false)
  meta      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  request InsuranceRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
}

model PolicyChunk {
  id        String                @id @default(cuid())
  insurer   String
  product   String
  version   String?
  sourceUrl String?
  content   String
  tokens    Int
  embedding Unsupported("vector")
  metadata  Json?
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt

  @@index([insurer, product])
}

model ChatSession {
  id        String   @id @default(cuid())
  requestId String
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  request  InsuranceRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  messages Message[]
}

model Message {
  id        String   @id @default(cuid())
  sessionId String
  role      String // 'user' | 'assistant' | 'system'
  content   String
  citations Json?
  metrics   Json?
  createdAt DateTime @default(now())

  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum RequestType {
  HOME
  CAR
  LIFE
  TRAVEL
  GADGET
}

enum RequestStatus {
  DRAFT
  SUBMITTED
  NEEDS_INFO
  IN_REVIEW
  READY
  ARCHIVED
}
