'use client'

import { useState, useRef, useEffect } from 'react'
import { useSession } from 'next-auth/react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { toast } from 'react-hot-toast'
import { Send, Bot, User, FileText, AlertCircle } from 'lucide-react'

interface Message {
  id: string
  role: 'user' | 'assistant'
  content: string
  timestamp: Date
  citations?: Array<{
    source: string
    page?: number
    confidence: number
  }>
  confidence?: number
}

export default function ChatPage() {
  const { data: session } = useSession()
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      role: 'assistant',
      content: 'Hello! I\'m your Insurance Copilot AI assistant. I can help you understand insurance policies, compare coverage options, and answer questions about your insurance needs. What would you like to know?',
      timestamp: new Date(),
    },
  ])
  const [inputValue, setInputValue] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [selectedPolicy, setSelectedPolicy] = useState<string>('')
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const policies = [
    { id: 'home', name: 'Home Insurance Policy', type: 'HOME' },
    { id: 'auto', name: 'Auto Insurance Policy', type: 'CAR' },
    { id: 'life', name: 'Life Insurance Policy', type: 'LIFE' },
    { id: 'travel', name: 'Travel Insurance Policy', type: 'TRAVEL' },
  ]

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!inputValue.trim() || isLoading) return

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: inputValue,
      timestamp: new Date(),
    }

    setMessages(prev => [...prev, userMessage])
    setInputValue('')
    setIsLoading(true)

    try {
      // Mock AI response - replace with actual API call
      await new Promise(resolve => setTimeout(resolve, 1500))
      
      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: generateMockResponse(inputValue),
        timestamp: new Date(),
        citations: selectedPolicy ? [
          {
            source: `${selectedPolicy} Policy Document`,
            page: Math.floor(Math.random() * 20) + 1,
            confidence: 0.85 + Math.random() * 0.1,
          }
        ] : undefined,
        confidence: 0.85 + Math.random() * 0.1,
      }

      setMessages(prev => [...prev, aiResponse])
    } catch (error) {
      toast.error('Failed to get AI response')
    } finally {
      setIsLoading(false)
    }
  }

  const generateMockResponse = (question: string): string => {
    const responses = [
      'Based on your question, I can see that you\'re asking about insurance coverage. Let me analyze the relevant policy documents to give you a comprehensive answer.',
      'That\'s a great question about insurance! I\'ve reviewed your policy documents and can provide you with detailed information about your coverage.',
      'I understand your concern. After analyzing your insurance policy, here\'s what I found regarding your specific question.',
      'Excellent question! Let me break down the relevant sections of your insurance policy to explain this clearly.',
      'I\'ve reviewed your policy documents and can provide you with a detailed analysis of your insurance coverage.',
    ]
    
    return responses[Math.floor(Math.random() * responses.length)] + ' ' +
           'This is a mock response for demonstration purposes. In the real application, this would be generated by the AI based on your actual policy documents and RAG search results.'
  }

  const handlePolicySelect = (policyId: string) => {
    setSelectedPolicy(policyId)
    toast.success(`Now analyzing ${policies.find(p => p.id === policyId)?.name}`)
  }

  if (!session) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <h2 className="text-2xl font-bold mb-4">Please sign in to access chat</h2>
          <Button asChild>
            <a href="/auth/sign-in">Sign In</a>
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="max-w-6xl mx-auto space-y-6">
        {/* Header */}
        <div>
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white">AI Policy Chat</h1>
          <p className="text-gray-600 dark:text-gray-400 mt-2">
            Get intelligent insights about your insurance policies with AI-powered analysis
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          {/* Policy Selection Sidebar */}
          <div className="lg:col-span-1">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <FileText className="h-5 w-5" />
                  Select Policy
                </CardTitle>
                <CardDescription>
                  Choose which policy to analyze
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-3">
                {policies.map((policy) => (
                  <Button
                    key={policy.id}
                    variant={selectedPolicy === policy.id ? 'default' : 'outline'}
                    className="w-full justify-start"
                    onClick={() => handlePolicySelect(policy.id)}
                  >
                    {policy.name}
                  </Button>
                ))}
              </CardContent>
            </Card>

            {/* Chat Tips */}
            <Card className="mt-6">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <AlertCircle className="h-5 w-5" />
                  Chat Tips
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-2 text-sm text-gray-600 dark:text-gray-400">
                <p>• Ask about specific coverage details</p>
                <p>• Compare different policy options</p>
                <p>• Get explanations of insurance terms</p>
                <p>• Understand your policy limits</p>
              </CardContent>
            </Card>
          </div>

          {/* Chat Interface */}
          <div className="lg:col-span-3">
            <Card className="h-[600px] flex flex-col">
              <CardHeader>
                                        <CardTitle className="flex items-center gap-2">
                          <Bot className="h-5 w-5" />
                          Policy Pilot AI
                        </CardTitle>
                <CardDescription>
                  {selectedPolicy 
                    ? `Analyzing: ${policies.find(p => p.id === selectedPolicy)?.name}`
                    : 'Select a policy to start analyzing'
                  }
                </CardDescription>
              </CardHeader>
              
              <CardContent className="flex-1 flex flex-col">
                {/* Messages */}
                <div className="flex-1 overflow-y-auto space-y-4 mb-4 p-4 border rounded-lg">
                  {messages.map((message) => (
                    <div
                      key={message.id}
                      className={`flex gap-3 ${
                        message.role === 'user' ? 'justify-end' : 'justify-start'
                      }`}
                    >
                      {message.role === 'assistant' && (
                        <div className="w-8 h-8 rounded-full bg-blue-100 dark:bg-blue-900 flex items-center justify-center">
                          <Bot className="h-4 w-4 text-blue-600 dark:text-blue-400" />
                        </div>
                      )}
                      
                      <div
                        className={`max-w-[80%] rounded-lg p-3 ${
                          message.role === 'user'
                            ? 'bg-blue-600 text-white'
                            : 'bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-gray-100'
                        }`}
                      >
                        <p className="text-sm">{message.content}</p>
                        
                        {message.citations && message.citations.length > 0 && (
                          <div className="mt-2 pt-2 border-t border-gray-200 dark:border-gray-700">
                            <p className="text-xs text-gray-500 dark:text-gray-400 mb-1">
                              Sources:
                            </p>
                            {message.citations.map((citation, index) => (
                              <div key={index} className="text-xs text-gray-600 dark:text-gray-300">
                                {citation.source} (Page {citation.page}, Confidence: {(citation.confidence * 100).toFixed(0)}%)
                              </div>
                            ))}
                          </div>
                        )}
                        
                        {message.confidence && (
                          <div className="mt-2 text-xs text-gray-500 dark:text-gray-400">
                            Confidence: {(message.confidence * 100).toFixed(0)}%
                          </div>
                        )}
                      </div>

                      {message.role === 'user' && (
                        <div className="w-8 h-8 rounded-full bg-gray-100 dark:bg-gray-800 flex items-center justify-center">
                          <User className="h-4 w-4 text-gray-600 dark:text-gray-400" />
                        </div>
                      )}
                    </div>
                  ))}
                  
                  {isLoading && (
                    <div className="flex gap-3 justify-start">
                      <div className="w-8 h-8 rounded-full bg-blue-100 dark:bg-blue-900 flex items-center justify-center">
                        <Bot className="h-4 w-4 text-blue-600 dark:text-blue-400" />
                      </div>
                      <div className="bg-gray-100 dark:bg-gray-800 rounded-lg p-3">
                        <div className="flex space-x-1">
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                        </div>
                      </div>
                    </div>
                  )}
                  
                  <div ref={messagesEndRef} />
                </div>

                {/* Input Form */}
                <form onSubmit={handleSubmit} className="flex gap-2">
                  <div className="flex-1">
                    <Label htmlFor="message" className="sr-only">
                      Message
                    </Label>
                    <Input
                      id="message"
                      value={inputValue}
                      onChange={(e) => setInputValue(e.target.value)}
                      placeholder="Ask about your insurance policy..."
                      disabled={isLoading}
                      className="w-full"
                    />
                  </div>
                  <Button type="submit" disabled={isLoading || !inputValue.trim()}>
                    <Send className="h-4 w-4" />
                  </Button>
                </form>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  )
}
